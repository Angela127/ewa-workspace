{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/ewa_workspace/app/context/avatarState.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport {\r\n  createContext,\r\n  useCallback,\r\n  useReducer,\r\n  PropsWithChildren,\r\n  Context,\r\n} from \"react\";\r\n\r\n/**\r\n * Initial state for Avatar Builder.\r\n * - `activeIcon` - Name correlates to the currently selected icon in the sidebar, and should match\r\n *                  a pattern in the artboard name from the `.riv` file\r\n *                  (i.e. `BodyColor` for `BodyColorIcon` artboard)\r\n * - `riveAvatarSelections` - Object that holds the current selection for each character feature. The\r\n *                            number correlates to the state machine input value for `numOption` input\r\n *                            for the option button state machines in the `.riv` file\r\n *\r\n */\r\nconst initialState = {\r\n  activeIcon: \"BodyColor\",\r\n  riveAvatarSelections: {\r\n    BodyColor: 0,\r\n    BodyFace: 0,\r\n    BackgroundColor: 0,\r\n  },\r\n};\r\n\r\nconst actions = {\r\n  SET_ACTIVE_ICON: \"SET_ACTIVE_ICON\",\r\n  SET_RIVE_AVATAR_SELECTION: \"SET_RIVE_AVATAR_SELECTION\",\r\n};\r\n\r\nexport interface Action<T, P> {\r\n  readonly type: T;\r\n  readonly payload?: P;\r\n}\r\n\r\n/**\r\n * Reducer function that updates state given a specific action and payload\r\n */\r\nconst reducer = (state: any, action: any) => {\r\n  switch (action.type) {\r\n    case actions.SET_ACTIVE_ICON:\r\n      return {\r\n        ...state,\r\n        activeIcon: action.activeIcon,\r\n      };\r\n    case actions.SET_RIVE_AVATAR_SELECTION:\r\n      return {\r\n        ...state,\r\n        riveAvatarSelections: {\r\n          ...state.riveAvatarSelections,\r\n          [action.feature]: action.featureValue,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const AvatarStateContext: Context<any> = createContext({});\r\n\r\n/**\r\n * Wraps the app with the AvatarStateContext provider and exposes action functions\r\n * that child components can call to update the state indirectly\r\n */\r\nexport const AvatarStateProvider = ({ children }: PropsWithChildren) => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n  /**\r\n   * Sets the active icon in the state when a user clicks a character feature icon\r\n   */\r\n  const setActiveIcon = useCallback(\r\n    (activeIcon: string) => {\r\n      let splicedIconName = activeIcon.replace(\"Icon\", \"\");\r\n      dispatch({\r\n        type: actions.SET_ACTIVE_ICON,\r\n        activeIcon: splicedIconName,\r\n      });\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  /**\r\n   * Sets a selection of a character feature in the state when a user clicks on one of the\r\n   * multiple options for that feature (i.e. Mustache for Facial hair)\r\n   */\r\n  const setRiveAvatarSelection = useCallback(\r\n    (feature: string, featureValue: number) => {\r\n      dispatch({\r\n        type: actions.SET_RIVE_AVATAR_SELECTION,\r\n        feature,\r\n        featureValue,\r\n      });\r\n    },\r\n    []\r\n  );\r\n\r\n  const value = {\r\n    state,\r\n    setActiveIcon,\r\n    setRiveAvatarSelection,\r\n  };\r\n\r\n  return (\r\n    <AvatarStateContext.Provider value={value}>\r\n      {children}\r\n    </AvatarStateContext.Provider>\r\n  );\r\n};\r\n"],"names":[],"mappings":";;;;;AAEA;;;AAFA;;AAUA;;;;;;;;;CASC,GACD,MAAM,eAAe;IACnB,YAAY;IACZ,sBAAsB;QACpB,WAAW;QACX,UAAU;QACV,iBAAiB;IACnB;AACF;AAEA,MAAM,UAAU;IACd,iBAAiB;IACjB,2BAA2B;AAC7B;AAOA;;CAEC,GACD,MAAM,UAAU,CAAC,OAAY;IAC3B,OAAQ,OAAO,IAAI;QACjB,KAAK,QAAQ,eAAe;YAC1B,OAAO;gBACL,GAAG,KAAK;gBACR,YAAY,OAAO,UAAU;YAC/B;QACF,KAAK,QAAQ,yBAAyB;YACpC,OAAO;gBACL,GAAG,KAAK;gBACR,sBAAsB;oBACpB,GAAG,MAAM,oBAAoB;oBAC7B,CAAC,OAAO,OAAO,CAAC,EAAE,OAAO,YAAY;gBACvC;YACF;QACF;YACE,OAAO;IACX;AACF;AAEO,MAAM,mCAAmC,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAAE,CAAC;AAMxD,MAAM,sBAAsB,CAAC,EAAE,QAAQ,EAAqB;;IACjE,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE,SAAS;IAE9C;;GAEC,GACD,MAAM,gBAAgB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;0DAC9B,CAAC;YACC,IAAI,kBAAkB,WAAW,OAAO,CAAC,QAAQ;YACjD,SAAS;gBACP,MAAM,QAAQ,eAAe;gBAC7B,YAAY;YACd;QACF;yDACA;QAAC;KAAS;IAGZ;;;GAGC,GACD,MAAM,yBAAyB,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;mEACvC,CAAC,SAAiB;YAChB,SAAS;gBACP,MAAM,QAAQ,yBAAyB;gBACvC;gBACA;YACF;QACF;kEACA,EAAE;IAGJ,MAAM,QAAQ;QACZ;QACA;QACA;IACF;IAEA,qBACE,6LAAC,mBAAmB,QAAQ;QAAC,OAAO;kBACjC;;;;;;AAGP;GA3Ca;KAAA"}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/ewa_workspace/components/RiveAvatarComponent.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useEffect, useContext } from \"react\";\r\nimport {\r\n  useRive,\r\n  useStateMachineInput,\r\n  Layout,\r\n  Alignment,\r\n} from \"@rive-app/react-canvas\";\r\nimport { AvatarStateContext } from \"@/app/context/avatarState\";\r\n\r\n// @refresh reset\r\n\r\nconst STATE_MACHINE_NAME = \"State Machine 1\";\r\n\r\n/**\r\n * Component for the actual Avatar character preview. It listens to the global state context\r\n * to listen to when users select new character feature options and updates the avatar state\r\n * machine accordingly\r\n */\r\nexport default function RiveAvatarComponent() {\r\n  const { rive, RiveComponent } = useRive({\r\n    src: \"./ewa.riv\",\r\n    artboard: \"Avatar\",\r\n    stateMachines: [STATE_MACHINE_NAME],\r\n    layout: new Layout({\r\n      alignment: Alignment.TopCenter,\r\n    }),\r\n    autoplay: true,\r\n  });\r\n\r\n  const {\r\n    state: { riveAvatarSelections },\r\n  } = useContext(AvatarStateContext);\r\n\r\n  const numBodyColor = useStateMachineInput(\r\n    rive,\r\n    STATE_MACHINE_NAME,\r\n    \"numBodyColor\"\r\n  );\r\n  const numBodyFace = useStateMachineInput(\r\n    rive,\r\n    STATE_MACHINE_NAME,\r\n    \"numBodyFace\"\r\n  );\r\n  const numBackgroundColor = useStateMachineInput(\r\n    rive,\r\n    STATE_MACHINE_NAME,\r\n    \"numBackgroundColor\"\r\n  );\r\n\r\n  const changesTrigger = useStateMachineInput(\r\n    rive,\r\n    STATE_MACHINE_NAME,\r\n    \"changes\"\r\n  );\r\n\r\n  /**\r\n   * Set new user-selected character features on the state machine and fire a trigger input\r\n   * to visually show the new selection on the avatar\r\n   */\r\n  useEffect(() => {\r\n    if (\r\n      rive &&\r\n      numBodyColor &&\r\n      numBodyFace &&\r\n      numBackgroundColor &&\r\n      changesTrigger\r\n    ) {\r\n      numBodyColor!.value = riveAvatarSelections[\"BodyColor\"];\r\n      numBodyFace!.value = riveAvatarSelections[\"BodyFace\"];\r\n      numBackgroundColor!.value = riveAvatarSelections[\"BackgroundColor\"];\r\n      changesTrigger!.fire();\r\n    }\r\n  }, [\r\n    rive,\r\n    numBodyColor,\r\n    numBodyFace,\r\n    riveAvatarSelections,\r\n    numBackgroundColor,\r\n    changesTrigger,\r\n  ]);\r\n\r\n  return (\r\n    <RiveComponent className=\"bg-[#090909] w-full h-full shadow-[10px_0_#000]\" />\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AAMA;;;AATA;;;;AAWA,iBAAiB;AAEjB,MAAM,qBAAqB;AAOZ,SAAS;;IACtB,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,CAAA,GAAA,oKAAA,CAAA,UAAO,AAAD,EAAE;QACtC,KAAK;QACL,UAAU;QACV,eAAe;YAAC;SAAmB;QACnC,QAAQ,IAAI,oKAAA,CAAA,SAAM,CAAC;YACjB,WAAW,oKAAA,CAAA,YAAS,CAAC,SAAS;QAChC;QACA,UAAU;IACZ;IAEA,MAAM,EACJ,OAAO,EAAE,oBAAoB,EAAE,EAChC,GAAG,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE,iIAAA,CAAA,qBAAkB;IAEjC,MAAM,eAAe,CAAA,GAAA,oKAAA,CAAA,uBAAoB,AAAD,EACtC,MACA,oBACA;IAEF,MAAM,cAAc,CAAA,GAAA,oKAAA,CAAA,uBAAoB,AAAD,EACrC,MACA,oBACA;IAEF,MAAM,qBAAqB,CAAA,GAAA,oKAAA,CAAA,uBAAoB,AAAD,EAC5C,MACA,oBACA;IAGF,MAAM,iBAAiB,CAAA,GAAA,oKAAA,CAAA,uBAAoB,AAAD,EACxC,MACA,oBACA;IAGF;;;GAGC,GACD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;yCAAE;YACR,IACE,QACA,gBACA,eACA,sBACA,gBACA;gBACA,aAAc,KAAK,GAAG,oBAAoB,CAAC,YAAY;gBACvD,YAAa,KAAK,GAAG,oBAAoB,CAAC,WAAW;gBACrD,mBAAoB,KAAK,GAAG,oBAAoB,CAAC,kBAAkB;gBACnE,eAAgB,IAAI;YACtB;QACF;wCAAG;QACD;QACA;QACA;QACA;QACA;QACA;KACD;IAED,qBACE,6LAAC;QAAc,WAAU;;;;;;AAE7B;GAlEwB;;QACU,oKAAA,CAAA,UAAO;QAclB,oKAAA,CAAA,uBAAoB;QAKrB,oKAAA,CAAA,uBAAoB;QAKb,oKAAA,CAAA,uBAAoB;QAMxB,oKAAA,CAAA,uBAAoB;;;KA/BrB"}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/ewa_workspace/components/RiveIconButton.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useContext, useCallback, useEffect } from \"react\";\r\nimport { useRive, useStateMachineInput } from \"@rive-app/react-canvas\";\r\nimport { AvatarStateContext } from \"@/app/context/avatarState\";\r\n\r\n// @refresh reset\r\n\r\ninterface RiveIconButtonProps {\r\n  artboardName: string;\r\n}\r\n\r\nconst STATE_MACHINE_NAME = \"State Machine 1\";\r\n\r\n/**\r\n * Reusable component for the character feature icons that users can click to see\r\n * a list of options for that feature (i.e. Facial Hair, Body Color, etc.)\r\n */\r\nexport default function RiveIconButton({ artboardName }: RiveIconButtonProps) {\r\n  const {\r\n    state: { activeIcon, riveAvatarSelections },\r\n    setActiveIcon,\r\n  } = useContext(AvatarStateContext);\r\n\r\n  const { rive, RiveComponent } = useRive({\r\n    src: \"./ewa.riv\",\r\n    artboard: artboardName,\r\n    stateMachines: [STATE_MACHINE_NAME],\r\n    autoplay: true,\r\n    shouldDisableRiveListeners: true,\r\n  });\r\n\r\n  const strippedDownName = artboardName.replace(\"Icon\", \"\");\r\n\r\n  const isHovered = useStateMachineInput(rive, STATE_MACHINE_NAME, \"isHover\");\r\n  const isIconActive = useStateMachineInput(\r\n    rive,\r\n    STATE_MACHINE_NAME,\r\n    \"isIconActive\",\r\n    activeIcon === strippedDownName\r\n  );\r\n\r\n  const numOption = useStateMachineInput(\r\n    rive,\r\n    STATE_MACHINE_NAME,\r\n    `num${strippedDownName}`\r\n  );\r\n\r\n  /**\r\n   * The icon graphic should update to reflect the chosen feature option for that icon\r\n   * and so this listens for user selections in the options and updates accordingly\r\n   */\r\n  useEffect(() => {\r\n    if (rive && numOption) {\r\n      numOption.value = riveAvatarSelections[strippedDownName];\r\n    }\r\n  }, [rive, numOption, riveAvatarSelections, strippedDownName]);\r\n\r\n  /**\r\n   * When a user clicks on an icon, we want to set the isIconActive flag on the state machine input\r\n   * to true for that icon, and false for all other icons\r\n   */\r\n  useEffect(() => {\r\n    if (rive && isIconActive) {\r\n      if (activeIcon === strippedDownName) {\r\n        isIconActive.value = true;\r\n      } else {\r\n        isIconActive.value = false;\r\n      }\r\n    }\r\n  }, [rive, activeIcon, isIconActive, strippedDownName]);\r\n\r\n  const onFocus = useCallback(() => {\r\n    if (rive && isHovered) {\r\n      isHovered.value = true;\r\n    }\r\n  }, [rive, isHovered]);\r\n\r\n  const onBlur = useCallback(() => {\r\n    if (rive && isHovered) {\r\n      isHovered.value = false;\r\n    }\r\n  }, [rive, isHovered]);\r\n\r\n  const onClick = useCallback(() => {\r\n    if (rive && isIconActive) {\r\n      isIconActive.value = true;\r\n      setActiveIcon(artboardName);\r\n    }\r\n  }, [rive, isIconActive, artboardName, setActiveIcon]);\r\n\r\n  return (\r\n    <button\r\n      className=\"aspect-square h-full\"\r\n      onFocus={onFocus}\r\n      onBlur={onBlur}\r\n      onClick={onClick}\r\n    >\r\n      <RiveComponent />\r\n    </button>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;;;AAJA;;;;AAYA,MAAM,qBAAqB;AAMZ,SAAS,eAAe,EAAE,YAAY,EAAuB;;IAC1E,MAAM,EACJ,OAAO,EAAE,UAAU,EAAE,oBAAoB,EAAE,EAC3C,aAAa,EACd,GAAG,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE,iIAAA,CAAA,qBAAkB;IAEjC,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,CAAA,GAAA,oKAAA,CAAA,UAAO,AAAD,EAAE;QACtC,KAAK;QACL,UAAU;QACV,eAAe;YAAC;SAAmB;QACnC,UAAU;QACV,4BAA4B;IAC9B;IAEA,MAAM,mBAAmB,aAAa,OAAO,CAAC,QAAQ;IAEtD,MAAM,YAAY,CAAA,GAAA,oKAAA,CAAA,uBAAoB,AAAD,EAAE,MAAM,oBAAoB;IACjE,MAAM,eAAe,CAAA,GAAA,oKAAA,CAAA,uBAAoB,AAAD,EACtC,MACA,oBACA,gBACA,eAAe;IAGjB,MAAM,YAAY,CAAA,GAAA,oKAAA,CAAA,uBAAoB,AAAD,EACnC,MACA,oBACA,CAAC,GAAG,EAAE,kBAAkB;IAG1B;;;GAGC,GACD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;oCAAE;YACR,IAAI,QAAQ,WAAW;gBACrB,UAAU,KAAK,GAAG,oBAAoB,CAAC,iBAAiB;YAC1D;QACF;mCAAG;QAAC;QAAM;QAAW;QAAsB;KAAiB;IAE5D;;;GAGC,GACD,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;oCAAE;YACR,IAAI,QAAQ,cAAc;gBACxB,IAAI,eAAe,kBAAkB;oBACnC,aAAa,KAAK,GAAG;gBACvB,OAAO;oBACL,aAAa,KAAK,GAAG;gBACvB;YACF;QACF;mCAAG;QAAC;QAAM;QAAY;QAAc;KAAiB;IAErD,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;+CAAE;YAC1B,IAAI,QAAQ,WAAW;gBACrB,UAAU,KAAK,GAAG;YACpB;QACF;8CAAG;QAAC;QAAM;KAAU;IAEpB,MAAM,SAAS,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;8CAAE;YACzB,IAAI,QAAQ,WAAW;gBACrB,UAAU,KAAK,GAAG;YACpB;QACF;6CAAG;QAAC;QAAM;KAAU;IAEpB,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;+CAAE;YAC1B,IAAI,QAAQ,cAAc;gBACxB,aAAa,KAAK,GAAG;gBACrB,cAAc;YAChB;QACF;8CAAG;QAAC;QAAM;QAAc;QAAc;KAAc;IAEpD,qBACE,6LAAC;QACC,WAAU;QACV,SAAS;QACT,QAAQ;QACR,SAAS;kBAET,cAAA,6LAAC;;;;;;;;;;AAGP;GAnFwB;;QAMU,oKAAA,CAAA,UAAO;QAUrB,oKAAA,CAAA,uBAAoB;QACjB,oKAAA,CAAA,uBAAoB;QAOvB,oKAAA,CAAA,uBAAoB;;;KAxBhB"}},
    {"offset": {"line": 324, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 330, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/ewa_workspace/components/RiveIconsContainer.tsx"],"sourcesContent":["import RiveIconButton from \"./RiveIconButton\";\r\n\r\nconst getArtboardName = (artboardName: String) => {\r\n  if (artboardName === \"BackgroundColor\") {\r\n    return `${artboardName}Icon`;\r\n  }\r\n  return `Body${artboardName}Icon`;\r\n};\r\n\r\n/**\r\n * List out all the character feature icon buttons\r\n */\r\nexport default function RiveIconsContainer() {\r\n  return (\r\n    <div className=\"md:gap-x-4 gap-x-2 w-full h-14 md:h-20 lg:h-24 bg-[#1D1D1D] flex md:justify-between justify-center md:p-4 px-[12px] py-[4px] rounded-[16px] md:mx-auto\">\r\n      <RiveIconButton artboardName={getArtboardName(\"Color\")} />\r\n      <RiveIconButton artboardName={getArtboardName(\"Face\")} />\r\n      <RiveIconButton artboardName={getArtboardName(\"BackgroundColor\")} />\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;;AAEA,MAAM,kBAAkB,CAAC;IACvB,IAAI,iBAAiB,mBAAmB;QACtC,OAAO,GAAG,aAAa,IAAI,CAAC;IAC9B;IACA,OAAO,CAAC,IAAI,EAAE,aAAa,IAAI,CAAC;AAClC;AAKe,SAAS;IACtB,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC,gIAAA,CAAA,UAAc;gBAAC,cAAc,gBAAgB;;;;;;0BAC9C,6LAAC,gIAAA,CAAA,UAAc;gBAAC,cAAc,gBAAgB;;;;;;0BAC9C,6LAAC,gIAAA,CAAA,UAAc;gBAAC,cAAc,gBAAgB;;;;;;;;;;;;AAGpD;KARwB"}},
    {"offset": {"line": 381, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 387, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/ewa_workspace/components/RiveOptionsButton.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useCallback, useContext, useEffect } from \"react\";\r\nimport { useRive, useStateMachineInput } from \"@rive-app/react-canvas\";\r\nimport { AvatarStateContext } from \"@/app/context/avatarState\";\r\n\r\n// @refresh reset\r\n\r\ninterface RiveOptionButtonProps {\r\n  artboardName: string;\r\n  optionIdx: number;\r\n}\r\n\r\nconst STATE_MACHINE_NAME = \"State Machine 1\";\r\n\r\n/**\r\n * Reusable component for a character feature option button (i.e. mustache and beard for facial hair feature)\r\n */\r\nexport default function RiveOptionButton({\r\n  artboardName,\r\n  optionIdx,\r\n}: RiveOptionButtonProps) {\r\n  const mainName = artboardName.replace(\"Button\", \"\");\r\n\r\n  const {\r\n    state: { riveAvatarSelections },\r\n    setRiveAvatarSelection,\r\n  } = useContext(AvatarStateContext);\r\n\r\n  const selectionValue = riveAvatarSelections[mainName];\r\n\r\n  const { rive, RiveComponent } = useRive({\r\n    src: \"./ewa.riv\",\r\n    artboard: artboardName,\r\n    stateMachines: [STATE_MACHINE_NAME],\r\n    autoplay: true,\r\n    shouldDisableRiveListeners: true,\r\n  });\r\n\r\n  const isHovered = useStateMachineInput(\r\n    rive,\r\n    STATE_MACHINE_NAME,\r\n    \"isBoxHover\"\r\n  );\r\n\r\n  const isIconActive = useStateMachineInput(\r\n    rive,\r\n    STATE_MACHINE_NAME,\r\n    \"isIconActive\",\r\n    selectionValue === optionIdx\r\n  );\r\n\r\n  const numOption = useStateMachineInput(\r\n    rive,\r\n    STATE_MACHINE_NAME,\r\n    \"numOption\",\r\n    optionIdx\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (rive && numOption && isIconActive) {\r\n      isIconActive.value = selectionValue === numOption.value;\r\n    }\r\n  }, [selectionValue, rive, numOption, isIconActive]);\r\n\r\n  const onFocus = useCallback(() => {\r\n    if (rive && isHovered) {\r\n      isHovered.value = true;\r\n    }\r\n  }, [rive, isHovered]);\r\n\r\n  const onBlur = useCallback(() => {\r\n    if (rive && isHovered) {\r\n      isHovered.value = false;\r\n    }\r\n  }, [rive, isHovered]);\r\n\r\n  const onClick = useCallback(() => {\r\n    if (rive && numOption) {\r\n      setRiveAvatarSelection(mainName, numOption.value);\r\n    }\r\n  }, [rive, numOption, setRiveAvatarSelection, mainName]);\r\n\r\n  return (\r\n    <button\r\n      className={`exp-option-button aspect-[21/16] min-w-[150px] opacity-100`}\r\n      onFocus={onFocus}\r\n      onBlur={onBlur}\r\n      onClick={onClick}\r\n    >\r\n      <RiveComponent />\r\n    </button>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;;;AAJA;;;;AAaA,MAAM,qBAAqB;AAKZ,SAAS,iBAAiB,EACvC,YAAY,EACZ,SAAS,EACa;;IACtB,MAAM,WAAW,aAAa,OAAO,CAAC,UAAU;IAEhD,MAAM,EACJ,OAAO,EAAE,oBAAoB,EAAE,EAC/B,sBAAsB,EACvB,GAAG,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE,iIAAA,CAAA,qBAAkB;IAEjC,MAAM,iBAAiB,oBAAoB,CAAC,SAAS;IAErD,MAAM,EAAE,IAAI,EAAE,aAAa,EAAE,GAAG,CAAA,GAAA,oKAAA,CAAA,UAAO,AAAD,EAAE;QACtC,KAAK;QACL,UAAU;QACV,eAAe;YAAC;SAAmB;QACnC,UAAU;QACV,4BAA4B;IAC9B;IAEA,MAAM,YAAY,CAAA,GAAA,oKAAA,CAAA,uBAAoB,AAAD,EACnC,MACA,oBACA;IAGF,MAAM,eAAe,CAAA,GAAA,oKAAA,CAAA,uBAAoB,AAAD,EACtC,MACA,oBACA,gBACA,mBAAmB;IAGrB,MAAM,YAAY,CAAA,GAAA,oKAAA,CAAA,uBAAoB,AAAD,EACnC,MACA,oBACA,aACA;IAGF,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;sCAAE;YACR,IAAI,QAAQ,aAAa,cAAc;gBACrC,aAAa,KAAK,GAAG,mBAAmB,UAAU,KAAK;YACzD;QACF;qCAAG;QAAC;QAAgB;QAAM;QAAW;KAAa;IAElD,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;iDAAE;YAC1B,IAAI,QAAQ,WAAW;gBACrB,UAAU,KAAK,GAAG;YACpB;QACF;gDAAG;QAAC;QAAM;KAAU;IAEpB,MAAM,SAAS,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;gDAAE;YACzB,IAAI,QAAQ,WAAW;gBACrB,UAAU,KAAK,GAAG;YACpB;QACF;+CAAG;QAAC;QAAM;KAAU;IAEpB,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,cAAW,AAAD;iDAAE;YAC1B,IAAI,QAAQ,WAAW;gBACrB,uBAAuB,UAAU,UAAU,KAAK;YAClD;QACF;gDAAG;QAAC;QAAM;QAAW;QAAwB;KAAS;IAEtD,qBACE,6LAAC;QACC,WAAW,CAAC,0DAA0D,CAAC;QACvE,SAAS;QACT,QAAQ;QACR,SAAS;kBAET,cAAA,6LAAC;;;;;;;;;;AAGP;GA3EwB;;QAaU,oKAAA,CAAA,UAAO;QAQrB,oKAAA,CAAA,uBAAoB;QAMjB,oKAAA,CAAA,uBAAoB;QAOvB,oKAAA,CAAA,uBAAoB;;;KAlChB"}},
    {"offset": {"line": 492, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 498, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/ewa_workspace/components/RiveOptionsContainer.tsx"],"sourcesContent":["import RiveOptionButton from \"./RiveOptionsButton\";\r\n\r\ninterface RiveOptionsContainerProps {\r\n  buttonCollectionName: string;\r\n  numOptions: number;\r\n}\r\n\r\nconst getArtboardName = (artboardName: String) => {\r\n  if (artboardName === \"BackgroundColor\") {\r\n    return `${artboardName}Button`;\r\n  }\r\n  return `Body${artboardName}Button`;\r\n};\r\n\r\n/**\r\n * List out all the character feature option buttons\r\n */\r\nexport default function RiveOptionsContainer({\r\n  buttonCollectionName,\r\n  numOptions,\r\n}: RiveOptionsContainerProps) {\r\n  const optionButtons = [];\r\n  for (let i = 0; i < numOptions; i++) {\r\n    optionButtons.push(\r\n      <RiveOptionButton\r\n        key={`RiveOptionButton-${buttonCollectionName}-${i}`}\r\n        artboardName={getArtboardName(buttonCollectionName)}\r\n        optionIdx={i}\r\n      />\r\n    );\r\n  }\r\n  return (\r\n    <div className=\"w-full max-h-[50vh] md:max-h-[100%] h-[calc(100%-3.5rem)] md:h-[calc(100%-6rem)] mx-auto md:p-3 py-3\">\r\n      <div className=\"h-fit gap-x-1 gap-y-px grid grid-cols-[repeat(auto-fill,_minmax(150px,_1fr))]\">\r\n        {optionButtons.map((buttonComp) => buttonComp)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n"],"names":[],"mappings":";;;;AAAA;;;AAOA,MAAM,kBAAkB,CAAC;IACvB,IAAI,iBAAiB,mBAAmB;QACtC,OAAO,GAAG,aAAa,MAAM,CAAC;IAChC;IACA,OAAO,CAAC,IAAI,EAAE,aAAa,MAAM,CAAC;AACpC;AAKe,SAAS,qBAAqB,EAC3C,oBAAoB,EACpB,UAAU,EACgB;IAC1B,MAAM,gBAAgB,EAAE;IACxB,IAAK,IAAI,IAAI,GAAG,IAAI,YAAY,IAAK;QACnC,cAAc,IAAI,eAChB,6LAAC,mIAAA,CAAA,UAAgB;YAEf,cAAc,gBAAgB;YAC9B,WAAW;WAFN,CAAC,iBAAiB,EAAE,qBAAqB,CAAC,EAAE,GAAG;;;;;IAK1D;IACA,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;sBACZ,cAAc,GAAG,CAAC,CAAC,aAAe;;;;;;;;;;;AAI3C;KArBwB"}},
    {"offset": {"line": 545, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 551, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/ASUS/ewa_workspace/components/RiveMainEntry.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useContext } from \"react\";\r\nimport RiveAvatar from \"@/components/RiveAvatarComponent\";\r\nimport RiveIconsContainer from \"@/components/RiveIconsContainer\";\r\nimport { AvatarStateContext } from \"@/app/context/avatarState\";\r\nimport RiveOptionsContainer from \"@/components/RiveOptionsContainer\";\r\nimport { JSONData } from \"@/app/page\";\r\n\r\ninterface RiveMainEntryProps {\r\n  localData: JSONData;\r\n}\r\n\r\n/**\r\n * Main component for the whole Avatar Builder page\r\n */\r\nexport default function RiveMainEntry({ localData }: RiveMainEntryProps) {\r\n  const {\r\n    state: { activeIcon },\r\n  } = useContext(AvatarStateContext);\r\n  const trimmedActiveIcon: keyof JSONData =\r\n    activeIcon === \"BackgroundColor\" ? activeIcon : activeIcon.split(\"Body\")[1];\r\n  return (\r\n    <div className=\"md:flex md:flex-row md:justify-center md:px-0 block min-h-[50vh] h-fit md:absolute md:left-0 md:right-0 md:top-1/2 md:-translate-y-1/2 md:mx-3 md:border-solid md:rounded-[24px] md:border-2 md:border-[#5B5B5B] bg-[#090909]\">\r\n      <div className=\"relative w-full h-fit-content flex md:flex-row flex-col md:p-3\">\r\n        <div className=\"w-full h-[50vh] flex flex-col justify-start md:justify-between md:max-w-[40%] md:h-full\">\r\n          <div className=\"block sm:text-4xl md:hidden bg-[#090909] md:py-12 md:px-8 text-white\">\r\n            <h1 className=\"md:text-4xl lg:text-5xl text-6xl text-center py-3 text-white font-sans\">\r\n              Avatar Creator\r\n            </h1>\r\n          </div>\r\n          <div className=\"h-[calc(100%-84px)] w-full md:aspect-square\">\r\n            <RiveAvatar />\r\n          </div>\r\n          <div className=\"hidden md:block bg-[#090909] md:py-12 md:px-8 text-white\">\r\n            <h1 className=\"md:text-4xl lg:text-5xl text-6xl text-center py-3 text-white\">\r\n              Avatar Creator\r\n            </h1>\r\n          </div>\r\n        </div>\r\n        <div className=\"w-full h-[50vh] md:h-full relative mx-auto overflow-x-hidden bg-[#090909] p-3 md:p-0 md:pl-3\">\r\n          <RiveIconsContainer />\r\n          <RiveOptionsContainer\r\n            buttonCollectionName={trimmedActiveIcon}\r\n            numOptions={localData[trimmedActiveIcon].numOptions}\r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AACA;AACA;;;AANA;;;;;;AAgBe,SAAS,cAAc,EAAE,SAAS,EAAsB;;IACrE,MAAM,EACJ,OAAO,EAAE,UAAU,EAAE,EACtB,GAAG,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE,iIAAA,CAAA,qBAAkB;IACjC,MAAM,oBACJ,eAAe,oBAAoB,aAAa,WAAW,KAAK,CAAC,OAAO,CAAC,EAAE;IAC7E,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YAAI,WAAU;;8BACb,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC;gCAAG,WAAU;0CAAyE;;;;;;;;;;;sCAIzF,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC,qIAAA,CAAA,UAAU;;;;;;;;;;sCAEb,6LAAC;4BAAI,WAAU;sCACb,cAAA,6LAAC;gCAAG,WAAU;0CAA+D;;;;;;;;;;;;;;;;;8BAKjF,6LAAC;oBAAI,WAAU;;sCACb,6LAAC,oIAAA,CAAA,UAAkB;;;;;sCACnB,6LAAC,sIAAA,CAAA,UAAoB;4BACnB,sBAAsB;4BACtB,YAAY,SAAS,CAAC,kBAAkB,CAAC,UAAU;;;;;;;;;;;;;;;;;;;;;;;AAM/D;GAlCwB;KAAA"}},
    {"offset": {"line": 669, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}